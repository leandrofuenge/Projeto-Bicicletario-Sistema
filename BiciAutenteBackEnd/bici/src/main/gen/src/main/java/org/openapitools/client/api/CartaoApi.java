/*
 * API de Cartões
 * Esta API permite operações relacionadas a cartões de usuários
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CartaoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CartaoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CartaoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usuariosAutenticarGet
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário autenticado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosAutenticarGetCall(String numeroDoCartao, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/autenticar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numeroDoCartao != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroDoCartao", numeroDoCartao));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosAutenticarGetValidateBeforeCall(String numeroDoCartao, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numeroDoCartao' is set
        if (numeroDoCartao == null) {
            throw new ApiException("Missing the required parameter 'numeroDoCartao' when calling usuariosAutenticarGet(Async)");
        }
        

        okhttp3.Call localVarCall = usuariosAutenticarGetCall(numeroDoCartao, _callback);
        return localVarCall;

    }

    /**
     * Autentica um usuário pelo número do cartão
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário autenticado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public void usuariosAutenticarGet(String numeroDoCartao) throws ApiException {
        usuariosAutenticarGetWithHttpInfo(numeroDoCartao);
    }

    /**
     * Autentica um usuário pelo número do cartão
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário autenticado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuariosAutenticarGetWithHttpInfo(String numeroDoCartao) throws ApiException {
        okhttp3.Call localVarCall = usuariosAutenticarGetValidateBeforeCall(numeroDoCartao, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Autentica um usuário pelo número do cartão (asynchronously)
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário autenticado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosAutenticarGetAsync(String numeroDoCartao, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosAutenticarGetValidateBeforeCall(numeroDoCartao, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuariosNaoUsoMomentaneoBicicletarioGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário não está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bicicletário está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosNaoUsoMomentaneoBicicletarioGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/NaoUsoMomentaneoBicicletario";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosNaoUsoMomentaneoBicicletarioGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usuariosNaoUsoMomentaneoBicicletarioGetCall(_callback);
        return localVarCall;

    }

    /**
     * Verifica se o bicicletário não está em uso no momento
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário não está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bicicletário está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public void usuariosNaoUsoMomentaneoBicicletarioGet() throws ApiException {
        usuariosNaoUsoMomentaneoBicicletarioGetWithHttpInfo();
    }

    /**
     * Verifica se o bicicletário não está em uso no momento
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário não está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bicicletário está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuariosNaoUsoMomentaneoBicicletarioGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usuariosNaoUsoMomentaneoBicicletarioGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verifica se o bicicletário não está em uso no momento (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário não está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bicicletário está em uso no momento </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosNaoUsoMomentaneoBicicletarioGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosNaoUsoMomentaneoBicicletarioGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuariosUsoMomentaneoBicicletarioGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário disponível para uso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosUsoMomentaneoBicicletarioGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/UsoMomentaneoBicicletario";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosUsoMomentaneoBicicletarioGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usuariosUsoMomentaneoBicicletarioGetCall(_callback);
        return localVarCall;

    }

    /**
     * Verifica se o bicicletário está em uso no momento
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário disponível para uso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public void usuariosUsoMomentaneoBicicletarioGet() throws ApiException {
        usuariosUsoMomentaneoBicicletarioGetWithHttpInfo();
    }

    /**
     * Verifica se o bicicletário está em uso no momento
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário disponível para uso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuariosUsoMomentaneoBicicletarioGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usuariosUsoMomentaneoBicicletarioGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verifica se o bicicletário está em uso no momento (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bicicletário disponível para uso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosUsoMomentaneoBicicletarioGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosUsoMomentaneoBicicletarioGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuariosUtilizarCreditoPost
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Crédito utilizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não há créditos suficientes para utilizar </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosUtilizarCreditoPostCall(String numeroDoCartao, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/utilizarCredito";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numeroDoCartao != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroDoCartao", numeroDoCartao));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosUtilizarCreditoPostValidateBeforeCall(String numeroDoCartao, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numeroDoCartao' is set
        if (numeroDoCartao == null) {
            throw new ApiException("Missing the required parameter 'numeroDoCartao' when calling usuariosUtilizarCreditoPost(Async)");
        }
        

        okhttp3.Call localVarCall = usuariosUtilizarCreditoPostCall(numeroDoCartao, _callback);
        return localVarCall;

    }

    /**
     * Utiliza crédito do usuário pelo número do cartão
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Crédito utilizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não há créditos suficientes para utilizar </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public void usuariosUtilizarCreditoPost(String numeroDoCartao) throws ApiException {
        usuariosUtilizarCreditoPostWithHttpInfo(numeroDoCartao);
    }

    /**
     * Utiliza crédito do usuário pelo número do cartão
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Crédito utilizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não há créditos suficientes para utilizar </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuariosUtilizarCreditoPostWithHttpInfo(String numeroDoCartao) throws ApiException {
        okhttp3.Call localVarCall = usuariosUtilizarCreditoPostValidateBeforeCall(numeroDoCartao, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Utiliza crédito do usuário pelo número do cartão (asynchronously)
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Crédito utilizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não há créditos suficientes para utilizar </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosUtilizarCreditoPostAsync(String numeroDoCartao, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosUtilizarCreditoPostValidateBeforeCall(numeroDoCartao, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for verificarcreditosGet
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Créditos do usuário obtidos com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificarcreditosGetCall(String numeroDoCartao, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verificarcreditos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numeroDoCartao != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroDoCartao", numeroDoCartao));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verificarcreditosGetValidateBeforeCall(String numeroDoCartao, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'numeroDoCartao' is set
        if (numeroDoCartao == null) {
            throw new ApiException("Missing the required parameter 'numeroDoCartao' when calling verificarcreditosGet(Async)");
        }
        

        okhttp3.Call localVarCall = verificarcreditosGetCall(numeroDoCartao, _callback);
        return localVarCall;

    }

    /**
     * Verifica créditos do usuário pelo número do cartão
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Créditos do usuário obtidos com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public void verificarcreditosGet(String numeroDoCartao) throws ApiException {
        verificarcreditosGetWithHttpInfo(numeroDoCartao);
    }

    /**
     * Verifica créditos do usuário pelo número do cartão
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Créditos do usuário obtidos com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> verificarcreditosGetWithHttpInfo(String numeroDoCartao) throws ApiException {
        okhttp3.Call localVarCall = verificarcreditosGetValidateBeforeCall(numeroDoCartao, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verifica créditos do usuário pelo número do cartão (asynchronously)
     * 
     * @param numeroDoCartao Número do cartão do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Créditos do usuário obtidos com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verificarcreditosGetAsync(String numeroDoCartao, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verificarcreditosGetValidateBeforeCall(numeroDoCartao, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
