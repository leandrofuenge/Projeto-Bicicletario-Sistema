/*
 * API de Usuário de Bicicletas
 * Esta API permite operações relacionadas aos usuários de bicicletas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Usuario;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsuarioApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsuarioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsuarioApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usuarioAlterarMeusDadosIdPut
     * @param id ID do usuário (required)
     * @param usuario Objeto JSON contendo os novos dados do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário modificados com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar modificar os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuarioAlterarMeusDadosIdPutCall(Integer id, Usuario usuario, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usuario;

        // create path and map variables
        String localVarPath = "/usuario/Alterar-Meus-Dados/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuarioAlterarMeusDadosIdPutValidateBeforeCall(Integer id, Usuario usuario, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usuarioAlterarMeusDadosIdPut(Async)");
        }
        
        // verify the required parameter 'usuario' is set
        if (usuario == null) {
            throw new ApiException("Missing the required parameter 'usuario' when calling usuarioAlterarMeusDadosIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = usuarioAlterarMeusDadosIdPutCall(id, usuario, _callback);
        return localVarCall;

    }

    /**
     * Modificar os dados de um usuário pelo ID
     * 
     * @param id ID do usuário (required)
     * @param usuario Objeto JSON contendo os novos dados do usuário (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário modificados com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar modificar os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public void usuarioAlterarMeusDadosIdPut(Integer id, Usuario usuario) throws ApiException {
        usuarioAlterarMeusDadosIdPutWithHttpInfo(id, usuario);
    }

    /**
     * Modificar os dados de um usuário pelo ID
     * 
     * @param id ID do usuário (required)
     * @param usuario Objeto JSON contendo os novos dados do usuário (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário modificados com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar modificar os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuarioAlterarMeusDadosIdPutWithHttpInfo(Integer id, Usuario usuario) throws ApiException {
        okhttp3.Call localVarCall = usuarioAlterarMeusDadosIdPutValidateBeforeCall(id, usuario, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modificar os dados de um usuário pelo ID (asynchronously)
     * 
     * @param id ID do usuário (required)
     * @param usuario Objeto JSON contendo os novos dados do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário modificados com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar modificar os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuarioAlterarMeusDadosIdPutAsync(Integer id, Usuario usuario, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuarioAlterarMeusDadosIdPutValidateBeforeCall(id, usuario, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuarioExcluirMeusDadosIdDelete
     * @param id ID do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário excluídos com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar excluir os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuarioExcluirMeusDadosIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuario/Excluir-Meus-Dados/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuarioExcluirMeusDadosIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usuarioExcluirMeusDadosIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = usuarioExcluirMeusDadosIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Excluir os dados de um usuário pelo ID
     * 
     * @param id ID do usuário (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário excluídos com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar excluir os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public void usuarioExcluirMeusDadosIdDelete(Integer id) throws ApiException {
        usuarioExcluirMeusDadosIdDeleteWithHttpInfo(id);
    }

    /**
     * Excluir os dados de um usuário pelo ID
     * 
     * @param id ID do usuário (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário excluídos com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar excluir os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuarioExcluirMeusDadosIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = usuarioExcluirMeusDadosIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Excluir os dados de um usuário pelo ID (asynchronously)
     * 
     * @param id ID do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário excluídos com sucesso </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor ao tentar excluir os dados do usuário </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuarioExcluirMeusDadosIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuarioExcluirMeusDadosIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuarioMeusDadosIdGet
     * @param id ID do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário recuperados com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuarioMeusDadosIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuario/Meus-dados/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuarioMeusDadosIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usuarioMeusDadosIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = usuarioMeusDadosIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Obter os dados de um usuário pelo ID
     * 
     * @param id ID do usuário (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário recuperados com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public void usuarioMeusDadosIdGet(Integer id) throws ApiException {
        usuarioMeusDadosIdGetWithHttpInfo(id);
    }

    /**
     * Obter os dados de um usuário pelo ID
     * 
     * @param id ID do usuário (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário recuperados com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuarioMeusDadosIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = usuarioMeusDadosIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Obter os dados de um usuário pelo ID (asynchronously)
     * 
     * @param id ID do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dados do usuário recuperados com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuarioMeusDadosIdGetAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuarioMeusDadosIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
