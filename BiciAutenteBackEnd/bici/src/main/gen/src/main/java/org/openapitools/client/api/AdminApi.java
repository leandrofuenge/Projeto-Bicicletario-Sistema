/*
 * API de Administração de Usuários
 * Esta API permite a administração de usuários
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Usuario;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usuariosAtualizarCpfPut
     * @param cpf CPF do usuário a ser atualizado (required)
     * @param usuario Objeto de usuário atualizado (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosAtualizarCpfPutCall(String cpf, Usuario usuario, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usuario;

        // create path and map variables
        String localVarPath = "/usuarios/atualizar/{cpf}"
            .replaceAll("\\{" + "cpf" + "\\}", localVarApiClient.escapeString(cpf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosAtualizarCpfPutValidateBeforeCall(String cpf, Usuario usuario, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling usuariosAtualizarCpfPut(Async)");
        }
        

        okhttp3.Call localVarCall = usuariosAtualizarCpfPutCall(cpf, usuario, _callback);
        return localVarCall;

    }

    /**
     * Atualiza um usuário por CPF
     * 
     * @param cpf CPF do usuário a ser atualizado (required)
     * @param usuario Objeto de usuário atualizado (optional)
     * @return Usuario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public Usuario usuariosAtualizarCpfPut(String cpf, Usuario usuario) throws ApiException {
        ApiResponse<Usuario> localVarResp = usuariosAtualizarCpfPutWithHttpInfo(cpf, usuario);
        return localVarResp.getData();
    }

    /**
     * Atualiza um usuário por CPF
     * 
     * @param cpf CPF do usuário a ser atualizado (required)
     * @param usuario Objeto de usuário atualizado (optional)
     * @return ApiResponse&lt;Usuario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Usuario> usuariosAtualizarCpfPutWithHttpInfo(String cpf, Usuario usuario) throws ApiException {
        okhttp3.Call localVarCall = usuariosAtualizarCpfPutValidateBeforeCall(cpf, usuario, null);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Atualiza um usuário por CPF (asynchronously)
     * 
     * @param cpf CPF do usuário a ser atualizado (required)
     * @param usuario Objeto de usuário atualizado (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosAtualizarCpfPutAsync(String cpf, Usuario usuario, final ApiCallback<Usuario> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosAtualizarCpfPutValidateBeforeCall(cpf, usuario, _callback);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuariosCpfCpfGet
     * @param cpf CPF do usuário a ser buscado (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosCpfCpfGetCall(String cpf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/cpf/{cpf}"
            .replaceAll("\\{" + "cpf" + "\\}", localVarApiClient.escapeString(cpf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosCpfCpfGetValidateBeforeCall(String cpf, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling usuariosCpfCpfGet(Async)");
        }
        

        okhttp3.Call localVarCall = usuariosCpfCpfGetCall(cpf, _callback);
        return localVarCall;

    }

    /**
     * Obtém um usuário por CPF
     * 
     * @param cpf CPF do usuário a ser buscado (required)
     * @return Usuario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public Usuario usuariosCpfCpfGet(String cpf) throws ApiException {
        ApiResponse<Usuario> localVarResp = usuariosCpfCpfGetWithHttpInfo(cpf);
        return localVarResp.getData();
    }

    /**
     * Obtém um usuário por CPF
     * 
     * @param cpf CPF do usuário a ser buscado (required)
     * @return ApiResponse&lt;Usuario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Usuario> usuariosCpfCpfGetWithHttpInfo(String cpf) throws ApiException {
        okhttp3.Call localVarCall = usuariosCpfCpfGetValidateBeforeCall(cpf, null);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtém um usuário por CPF (asynchronously)
     * 
     * @param cpf CPF do usuário a ser buscado (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário encontrado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosCpfCpfGetAsync(String cpf, final ApiCallback<Usuario> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosCpfCpfGetValidateBeforeCall(cpf, _callback);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuariosCriarPost
     * @param usuario Objeto de usuário a ser criado (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário criado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosCriarPostCall(Usuario usuario, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usuario;

        // create path and map variables
        String localVarPath = "/usuarios/criar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosCriarPostValidateBeforeCall(Usuario usuario, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usuariosCriarPostCall(usuario, _callback);
        return localVarCall;

    }

    /**
     * Cria um novo usuário
     * 
     * @param usuario Objeto de usuário a ser criado (optional)
     * @return Usuario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário criado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public Usuario usuariosCriarPost(Usuario usuario) throws ApiException {
        ApiResponse<Usuario> localVarResp = usuariosCriarPostWithHttpInfo(usuario);
        return localVarResp.getData();
    }

    /**
     * Cria um novo usuário
     * 
     * @param usuario Objeto de usuário a ser criado (optional)
     * @return ApiResponse&lt;Usuario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário criado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Usuario> usuariosCriarPostWithHttpInfo(Usuario usuario) throws ApiException {
        okhttp3.Call localVarCall = usuariosCriarPostValidateBeforeCall(usuario, null);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cria um novo usuário (asynchronously)
     * 
     * @param usuario Objeto de usuário a ser criado (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário criado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosCriarPostAsync(Usuario usuario, final ApiCallback<Usuario> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosCriarPostValidateBeforeCall(usuario, _callback);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuariosExcluirCpfDelete
     * @param cpf CPF do usuário a ser excluído (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário excluído com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosExcluirCpfDeleteCall(String cpf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/excluir/{cpf}"
            .replaceAll("\\{" + "cpf" + "\\}", localVarApiClient.escapeString(cpf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosExcluirCpfDeleteValidateBeforeCall(String cpf, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling usuariosExcluirCpfDelete(Async)");
        }
        

        okhttp3.Call localVarCall = usuariosExcluirCpfDeleteCall(cpf, _callback);
        return localVarCall;

    }

    /**
     * Exclui um usuário por CPF
     * 
     * @param cpf CPF do usuário a ser excluído (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário excluído com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public void usuariosExcluirCpfDelete(String cpf) throws ApiException {
        usuariosExcluirCpfDeleteWithHttpInfo(cpf);
    }

    /**
     * Exclui um usuário por CPF
     * 
     * @param cpf CPF do usuário a ser excluído (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário excluído com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usuariosExcluirCpfDeleteWithHttpInfo(String cpf) throws ApiException {
        okhttp3.Call localVarCall = usuariosExcluirCpfDeleteValidateBeforeCall(cpf, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Exclui um usuário por CPF (asynchronously)
     * 
     * @param cpf CPF do usuário a ser excluído (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário excluído com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosExcluirCpfDeleteAsync(String cpf, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosExcluirCpfDeleteValidateBeforeCall(cpf, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usuariosTodosGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosTodosGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/todos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usuariosTodosGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usuariosTodosGetCall(_callback);
        return localVarCall;

    }

    /**
     * Obtém todos os usuários
     * 
     * @return List&lt;Usuario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public List<Usuario> usuariosTodosGet() throws ApiException {
        ApiResponse<List<Usuario>> localVarResp = usuariosTodosGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtém todos os usuários
     * 
     * @return ApiResponse&lt;List&lt;Usuario&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Usuario>> usuariosTodosGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usuariosTodosGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Usuario>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtém todos os usuários (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erro ao processar a requisição </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usuariosTodosGetAsync(final ApiCallback<List<Usuario>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usuariosTodosGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Usuario>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
