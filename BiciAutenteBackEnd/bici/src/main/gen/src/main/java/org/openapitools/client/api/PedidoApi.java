/*
 * API de Pedidos
 * API para operações relacionadas a pedidos.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: seu_email@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PedidoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PedidoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PedidoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelarPedidoCpfDelete
     * @param cpf CPF do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pedido de cartão cancelado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - O usuário não possui pedido de cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelarPedidoCpfDeleteCall(String cpf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cancelar-pedido/{cpf}"
            .replaceAll("\\{" + "cpf" + "\\}", localVarApiClient.escapeString(cpf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelarPedidoCpfDeleteValidateBeforeCall(String cpf, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling cancelarPedidoCpfDelete(Async)");
        }
        

        okhttp3.Call localVarCall = cancelarPedidoCpfDeleteCall(cpf, _callback);
        return localVarCall;

    }

    /**
     * Cancela um pedido de cartão pelo CPF do usuário
     * 
     * @param cpf CPF do usuário (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pedido de cartão cancelado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - O usuário não possui pedido de cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public String cancelarPedidoCpfDelete(String cpf) throws ApiException {
        ApiResponse<String> localVarResp = cancelarPedidoCpfDeleteWithHttpInfo(cpf);
        return localVarResp.getData();
    }

    /**
     * Cancela um pedido de cartão pelo CPF do usuário
     * 
     * @param cpf CPF do usuário (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pedido de cartão cancelado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - O usuário não possui pedido de cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> cancelarPedidoCpfDeleteWithHttpInfo(String cpf) throws ApiException {
        okhttp3.Call localVarCall = cancelarPedidoCpfDeleteValidateBeforeCall(cpf, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancela um pedido de cartão pelo CPF do usuário (asynchronously)
     * 
     * @param cpf CPF do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pedido de cartão cancelado com sucesso </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - O usuário não possui pedido de cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelarPedidoCpfDeleteAsync(String cpf, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelarPedidoCpfDeleteValidateBeforeCall(cpf, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salvarEstadoPost
     * @param estadoPedido Estado do pedido a ser salvo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estado do pedido salvo com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salvarEstadoPostCall(Integer estadoPedido, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = estadoPedido;

        // create path and map variables
        String localVarPath = "/salvar-estado";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salvarEstadoPostValidateBeforeCall(Integer estadoPedido, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'estadoPedido' is set
        if (estadoPedido == null) {
            throw new ApiException("Missing the required parameter 'estadoPedido' when calling salvarEstadoPost(Async)");
        }
        

        okhttp3.Call localVarCall = salvarEstadoPostCall(estadoPedido, _callback);
        return localVarCall;

    }

    /**
     * Salva o estado de um pedido
     * 
     * @param estadoPedido Estado do pedido a ser salvo (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estado do pedido salvo com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public String salvarEstadoPost(Integer estadoPedido) throws ApiException {
        ApiResponse<String> localVarResp = salvarEstadoPostWithHttpInfo(estadoPedido);
        return localVarResp.getData();
    }

    /**
     * Salva o estado de um pedido
     * 
     * @param estadoPedido Estado do pedido a ser salvo (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estado do pedido salvo com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> salvarEstadoPostWithHttpInfo(Integer estadoPedido) throws ApiException {
        okhttp3.Call localVarCall = salvarEstadoPostValidateBeforeCall(estadoPedido, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Salva o estado de um pedido (asynchronously)
     * 
     * @param estadoPedido Estado do pedido a ser salvo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estado do pedido salvo com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salvarEstadoPostAsync(Integer estadoPedido, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = salvarEstadoPostValidateBeforeCall(estadoPedido, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for solicitarCartaoCpfGet
     * @param cpf CPF do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cartão solicitado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - O usuário não está elegível para solicitar um cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solicitarCartaoCpfGetCall(String cpf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/solicitar-cartao/{cpf}"
            .replaceAll("\\{" + "cpf" + "\\}", localVarApiClient.escapeString(cpf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call solicitarCartaoCpfGetValidateBeforeCall(String cpf, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling solicitarCartaoCpfGet(Async)");
        }
        

        okhttp3.Call localVarCall = solicitarCartaoCpfGetCall(cpf, _callback);
        return localVarCall;

    }

    /**
     * Solicita um cartão pelo CPF do usuário
     * 
     * @param cpf CPF do usuário (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cartão solicitado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - O usuário não está elegível para solicitar um cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public String solicitarCartaoCpfGet(String cpf) throws ApiException {
        ApiResponse<String> localVarResp = solicitarCartaoCpfGetWithHttpInfo(cpf);
        return localVarResp.getData();
    }

    /**
     * Solicita um cartão pelo CPF do usuário
     * 
     * @param cpf CPF do usuário (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cartão solicitado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - O usuário não está elegível para solicitar um cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> solicitarCartaoCpfGetWithHttpInfo(String cpf) throws ApiException {
        okhttp3.Call localVarCall = solicitarCartaoCpfGetValidateBeforeCall(cpf, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Solicita um cartão pelo CPF do usuário (asynchronously)
     * 
     * @param cpf CPF do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cartão solicitado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - O usuário não está elegível para solicitar um cartão </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erro interno do servidor </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solicitarCartaoCpfGetAsync(String cpf, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = solicitarCartaoCpfGetValidateBeforeCall(cpf, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
